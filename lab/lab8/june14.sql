show databases;
create database june14;
use june14;

show tables;


CREATE TABLE LOCATION
(
	LOCATION_ID INT NOT NULL,
	REGIONAL_GROUP VARCHAR(100),
	PRIMARY KEY (LOCATION_ID)
);

CREATE TABLE DEPARTMENT
(
	DEPARTMENT_ID INT NOT NULL,
	NAME VARCHAR(100),
	LOCATION_ID INT,
	PRIMARY KEY (DEPARTMENT_ID),
	FOREIGN KEY (LOCATION_ID) REFERENCES LOCATION (LOCATION_ID) ON DELETE CASCADE
);

CREATE TABLE JOB
(
	JOB_ID INT PRIMARY KEY NOT NULL,
	JOB_FUNCTION VARCHAR(100)
);

CREATE TABLE EMPLOYEE
(
	EMPLOYEE_ID INT NOT NULL,
	LAST_NAME VARCHAR(100) NOT NULL,
	FIRST_NAME VARCHAR(100) NOT NULL,
	MIDDLE_NAME CHAR(1) NOT NULL,
	JOB_ID INT,
	MANAGER_ID INT,
	HIRE_DATE DATE,
	SALARY INT ,
	COMMISSION INT,
	DEPARTMENT_ID INT,
	PRIMARY KEY (EMPLOYEE_ID),
	FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT (DEPARTMENT_ID) ON DELETE CASCADE
);


SHOW TABLES;

INSERT INTO LOCATION (LOCATION_ID,REGIONAL_GROUP) VALUES 
(122,'NEW YORK'),
(123,'DALLAS'),
(124,'CHICAGO'),
(167,'BOSTON');

INSERT INTO DEPARTMENT (DEPARTMENT_ID,NAME,LOCATION_ID) VALUES
(10,'ACCOUNTING',122),
(20,'RESEARCH',124),
(30,'SALES',123),
(40,'OPERATIONS',167);

INSERT INTO JOB (JOB_ID,JOB_FUNCTION) VALUES 
(667,'CLERK'),
(668,'STAFF'),
(669,'ANALYST'),
(670,'SALESPERSON'),
(671,'MANAGER'),
(672,'PRESIDENT');

INSERT INTO EMPLOYEE (EMPLOYEE_ID,LAST_NAME,FIRST_NAME,MIDDLE_NAME,JOB_ID,MANAGER_ID,HIRE_DATE,SALARY,COMMISSION,DEPARTMENT_ID) VALUES 
(7839,'MEGAN','JOHN','S',672,NULL,'14/12/12',5500,NULL,30),
(7369,'SMITH','JOHN','Q',667,7521,'18/12/17',800,NULL,20),
(7499,'ALLEN','KEVIN','J',670,7507,'17/02/20',1600,NULL,30),
(7505,'DOYLE','JEAN','K',671,7839,'15/04/04',2850,NULL,30),
(7506,'DENNIS','LYNN','S',671,7839,'15/05/15',2750,NULL,30),
(7507,'BAKER','LESLIE','D',671,7839,'15/06/10',2200,NULL,40),
(7521,'WARK','CYNTHIA','D',670,7505,'15/02/22',1250,500,30);


-- Order By Clause:
-- 1. List out the employee id, last name in ascending order based on the employee id.
SELECT EMPLOYEE_ID, LAST_NAME FROM EMPLOYEE ORDER BY EMPLOYEE_ID;

-- 2. List out the employee id, name in descending order based on salary column
SELECT EMPLOYEE_ID, FIRST_NAME, MIDDLE_NAME, LAST_NAME FROM EMPLOYEE ORDER BY SALARY DESC;

-- 3. list out the employee details according to their last_name in ascending order and salaries in descending order
SELECT * FROM EMPLOYEE ORDER BY LAST_NAME ASC, SALARY DESC;

-- 4. list out the employee details according to their last_name in ascending order and then on department_id in descending order.
SELECT * FROM EMPLOYEE ORDER BY LAST_NAME ASC, DEPARTMENT_ID DESC;



-- Group By &amp; Having Clause:
-- 5. How many employees who are working in different departments wise in the organization
SELECT DEPARTMENT_ID,COUNT(*) AS COUNT FROM EMPLOYEE GROUP BY DEPARTMENT_ID;
SELECT E.DEPARTMENT_ID, D.NAME, COUNT(*) AS COUNT FROM EMPLOYEE E, DEPARTMENT D WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID GROUP BY E.DEPARTMENT_ID;

-- 6. List out the department wise maximum salary, minimum salary, average salary of the employees
SELECT DEPARTMENT_ID, MAX(SALARY) AS MAXIMUMSALARY, MIN(SALARY) AS MINIMUMSALARY, AVG(SALARY) AS AVERAGESALARY FROM EMPLOYEE GROUP BY DEPARTMENT_ID;

-- 7. List out the job wise maximum salary, minimum salary, average salaries of the employees.
SELECT JOB_ID, MAX(SALARY) AS MAXIMUMSALARY, MIN(SALARY) AS MINIMUMSALARY, AVG(SALARY) AS AVERAGESALARY FROM EMPLOYEE GROUP BY JOB_ID;

-- 8. List out the no.of employees joined in every month in ascending order.
SELECT MONTHNAME(HIRE_DATE) AS MONTH,COUNT(*) AS COUNT FROM EMPLOYEE GROUP BY MONTH;

-- 9. List out the no.of employees for each month and year, in the ascending order based on the year, month.
SELECT MONTHNAME(HIRE_DATE) AS MONTH,YEAR(HIRE_DATE) AS YEAR,COUNT(*) AS COUNT FROM EMPLOYEE GROUP BY MONTH ORDER BY YEAR,MONTH;

-- 10. List out the department id having atleast four employees.
SELECT DEPARTMENT_ID, COUNT(*)AS 'NO OF EMPLOYEES' FROM EMPLOYEE GROUP BY DEPARTMENT_ID HAVING COUNT(DEPARTMENT_ID) >= 4;

-- 11. How many employees in January month.
SELECT MONTHNAME(HIRE_DATE) AS MONTH, COUNT(*) AS COUNT FROM EMPLOYEE GROUP BY MONTH HAVING MONTH = 'January';
SELECT MONTHNAME(HIRE_DATE) AS MONTH, COUNT(*) AS COUNT FROM EMPLOYEE GROUP BY MONTH HAVING MONTH = 'December';

-- 12. How many employees who are joined in January or September month.
SELECT MONTHNAME(HIRE_DATE) AS MONTH, COUNT(*) AS COUNT FROM EMPLOYEE GROUP BY MONTH HAVING MONTH IN ('January', 'September');
SELECT MONTHNAME(HIRE_DATE) AS MONTH, COUNT(*) AS COUNT FROM EMPLOYEE GROUP BY MONTH HAVING MONTH IN ('December', 'May');

-- 13. How many employees who are joined in 1985.
SELECT YEAR(HIRE_DATE) AS YEAR, COUNT(*) AS COUNT FROM EMPLOYEE GROUP BY YEAR HAVING YEAR IN (2015);

-- 14. How many employees joined each month in 1985.
SELECT MONTHNAME(HIRE_DATE) AS MONTH,YEAR(HIRE_DATE) AS YEAR,COUNT(*) AS COUNT FROM EMPLOYEE GROUP BY MONTH HAVING YEAR IN (2015);

-- 15. How many employees who are joined in March 1985.
SELECT MONTHNAME(HIRE_DATE) AS MONTH,YEAR(HIRE_DATE) AS YEAR, COUNT(*) AS COUNT FROM EMPLOYEE GROUP BY MONTH HAVING MONTH IN ('May') AND YEAR IN (2015);

-- 16. Which is the department id, having greater than or equal to 3 employees joined in April 1985.
SELECT DEPARTMENT_ID, MONTHNAME(HIRE_DATE) AS MONTH,YEAR(HIRE_DATE) AS YEAR, COUNT(*) AS COUNT FROM EMPLOYEE GROUP BY MONTH HAVING MONTH IN ('May') AND YEAR IN (2015) AND COUNT(DEPARTMENT_ID) >= 1;


-- Sub-Queries
-- 17. Display the employee who got the maximum salary.
SELECT * FROM EMPLOYEE WHERE SALARY = (SELECT MAX(SALARY) FROM EMPLOYEE);

-- 18. Display the employees who are working in Sales department
SELECT * FROM EMPLOYEE WHERE DEPARTMENT_ID = (SELECT D.DEPARTMENT_ID FROM DEPARTMENT D WHERE D.NAME="Sales" );

-- 19. Display the employees who are working as “Clerk”.
SELECT * FROM EMPLOYEE WHERE JOB_ID = (SELECT J.JOB_ID FROM JOB J WHERE J.JOB_FUNCTION="CLERK" );

-- 20. Display the employees who are working in “New York”
SELECT * FROM EMPLOYEE WHERE DEPARTMENT_ID = (SELECT D.DEPARTMENT_ID FROM DEPARTMENT D WHERE D.LOCATION_ID = (SELECT L.LOCATION_ID FROM LOCATION L WHERE L.REGIONAL_GROUP ="NEW YORK"));
-- 21. Find out number of employees working in “Sales” department.
SELECT COUNT(*) AS 'NUMBER OF EMPLOYEE' FROM EMPLOYEE WHERE DEPARTMENT_ID = (SELECT D.DEPARTMENT_ID FROM DEPARTMENT D WHERE D.NAME="Sales" );

-- 22. Update the employees’ salaries, who are working as Clerk on the basis of 10%.
UPDATE EMPLOYEE SET SALARY = (SALARY + 0.1*SALARY) WHERE JOB_ID = (SELECT J.JOB_ID FROM JOB J WHERE J.JOB_FUNCTION="CLERK" );

-- 23. Delete the employees who are working in accounting department.
SELECT * FROM EMPLOYEE;
DELETE FROM EMPLOYEE WHERE DEPARTMENT_ID = (SELECT D.DEPARTMENT_ID FROM DEPARTMENT D WHERE D.NAME="ACCOUNTING" );

-- 24. Display the second highest salary drawing employee details.
SELECT SALARY FROM EMPLOYEE;
SELECT MAX(SALARY) FROM EMPLOYEE WHERE SALARY NOT IN (SELECT MAX(SALARY) FROM EMPLOYEE);
SELECT SALARY FROM EMPLOYEE order by salary desc limit 1, 1;

-- 25. Display the Nth highest salary drawing employee details
-- order by salary desc limit 3,1;
SELECT SALARY FROM EMPLOYEE ORDER BY SALARY DESC LIMIT 1, 1;

-- Sub-Query operators: (ALL, ANY, SOME, EXISTS)
-- 26. List out the employees who earn more than every employee in department 30.
SELECT * FROM EMPLOYEE WHERE SALARY > ALL (SELECT SALARY FROM EMPLOYEE WHERE DEPARTMENT_ID = 30) ;

-- 27. List out the employees who earn more than the lowest salary in department 30.
SELECT * FROM EMPLOYEE WHERE SALARY > ALL (SELECT MIN(SALARY) FROM EMPLOYEE WHERE DEPARTMENT_ID = 30);

-- 28. Find out whose department has not employees.
SELECT * FROM DEPARTMENT D WHERE D.DEPARTMENT_ID != ALL (SELECT E.DEPARTMENT_ID FROM EMPLOYEE E, DEPARTMENT D WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID);

-- 29. Find out which department does not have any employees.
SELECT D.NAME FROM DEPARTMENT D WHERE D.DEPARTMENT_ID != ALL (SELECT E.DEPARTMENT_ID FROM EMPLOYEE E, DEPARTMENT D WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID);


-- Co-Related Sub Queries:
-- 30. Find out the employees who earn greater than the average salary for their department.
SELECT * FROM EMPLOYEE WHERE EXISTS ( SELECT AVG(SALARY) FROM EMPLOYEE group by DEPARTMENT_ID);



-- Joins
-- Simple join
-- 48. List our employees with their department names
SELECT CONCAT(FIRST_NAME,' ',MIDDLE_NAME,' ',LAST_NAME) AS 'EMPLOYEE NAME', EMPLOYEE.DEPARTMENT_ID FROM EMPLOYEE
LEFT JOIN DEPARTMENT
ON DEPARTMENT.DEPARTMENT_ID = EMPLOYEE.DEPARTMENT_ID;




-- 49. Display employees with their designations (jobs)

SELECT CONCAT(FIRST_NAME,' ',MIDDLE_NAME,' ',LAST_NAME) AS 'EMPLOYEE NAME',JOB_FUNCTION FROM EMPLOYEE
LEFT JOIN JOB
ON JOB.JOB_ID = EMPLOYEE.JOB_ID;



-- 50. Display the employees with their department name and regional groups.
SELECT CONCAT(FIRST_NAME,' ',MIDDLE_NAME,' ',LAST_NAME) AS 'EMPLOYEE NAME',EMPLOYEE.DEPARTMENT_ID,REGIONAL_GROUP FROM EMPLOYEE
LEFT JOIN DEPARTMENT
ON DEPARTMENT.DEPARTMENT_ID = EMPLOYEE.DEPARTMENT_ID
LEFT JOIN LOCATION
ON LOCATION.LOCATION_ID = DEPARTMENT.LOCATION_ID;



-- 51. How many employees who are working in different departments and display with department name.

SELECT EMPLOYEE.DEPARTMENT_ID,COUNT(*) AS COUNT FROM EMPLOYEE
JOIN DEPARTMENT
ON DEPARTMENT.DEPARTMENT_ID = EMPLOYEE.DEPARTMENT_ID
GROUP BY DEPARTMENT.NAME;


-- 52. How many employees who are working in sales department.
SELECT COUNT(*) AS COUNT FROM EMPLOYEE
JOIN DEPARTMENT
ON EMPLOYEE.DEPARTMENT_ID = DEPARTMENT.DEPARTMENT_ID
WHERE DEPARTMENT.NAME = 'SALES';



-- 53. Which is the department having greater than or equal to 5 employees and display the department names in ascending order?

SELECT EMPLOYEE.DEPARTMENT_ID,COUNT(*) AS COUNT FROM EMPLOYEE
JOIN DEPARTMENT
ON DEPARTMENT.DEPARTMENT_ID = EMPLOYEE.DEPARTMENT_ID
GROUP BY DEPARTMENT.NAME
ORDER BY DEPARTMENT.NAME;

-- 54. How many jobs in the organization with designations.

SELECT EMPLOYEE.JOB_ID,COUNT(*) AS COUNT FROM EMPLOYEE
LEFT JOIN JOB
ON JOB.JOB_ID = EMPLOYEE.JOB_ID
GROUP BY JOB.JOB_FUNCTION;


-- 55. How many employees working in “New York”.
SELECT COUNT(*) AS COUNT FROM EMPLOYEE
JOIN DEPARTMENT
ON DEPARTMENT.DEPARTMENT_ID = EMPLOYEE.DEPARTMENT_ID
JOIN LOCATION
ON LOCATION.LOCATION_ID = DEPARTMENT.LOCATION_ID
WHERE LOCATION.REGIONAL_GROUP = 'NEW YORK';


-- Non – Equi Join:
-- 56. Display employee details with salary grades.
SELECT EMPLOYEE_ID,CONCAT(FIRST_NAME,' ',MIDDLE_NAME,' ',LAST_NAME) AS 'EMPLOYEE NAME',JOB_ID,MANAGER_ID,HIRE_DATE,SALARY,COMMISSION,DEPARTMENT_ID,
CASE
WHEN SALARY >= 5000 THEN 'S'
WHEN SALARY BETWEEN 4000 AND 5000 THEN 'A'
WHEN SALARY BETWEEN 3000 AND 4000 THEN 'B'
WHEN SALARY BETWEEN 2000 AND 3000 THEN 'C'
WHEN SALARY BETWEEN 1000 AND 2000 THEN 'D'
ELSE 'E'
END AS 'SALARY_GRADE'
FROM EMPLOYEE;



-- 57. List out the no. of employees on grade wise.
SELECT COUNT(*) AS COUNT,
CASE
WHEN SALARY >= 5000 THEN 'S'
WHEN SALARY BETWEEN 4000 AND 5000 THEN 'A'
WHEN SALARY BETWEEN 3000 AND 4000 THEN 'B'
WHEN SALARY BETWEEN 2000 AND 3000 THEN 'C'
WHEN SALARY BETWEEN 1000 AND 2000 THEN 'D'
ELSE 'E'
END AS 'SALARY_GRADE'
FROM EMPLOYEE
GROUP BY SALARY_GRADE
ORDER BY COUNT;

-- 58. Display the employ salary grades and no. of employees between 2000 to 5000 range of
-- salary.
SELECT CONCAT(FIRST_NAME,' ',MIDDLE_NAME,' ',LAST_NAME) AS EMPLOYEE_NAME,COUNT(*) AS COUNT,
CASE
WHEN SALARY >= 5000 THEN 'S'
WHEN SALARY BETWEEN 4000 AND 5000 THEN 'A'
WHEN SALARY BETWEEN 3000 AND 4000 THEN 'B'
WHEN SALARY BETWEEN 2000 AND 3000 THEN 'C'
WHEN SALARY BETWEEN 1000 AND 2000 THEN 'D'
ELSE 'E'
END AS 'SALARY_GRADE'
FROM EMPLOYEE
JOIN JOB
ON JOB.JOB_ID = EMPLOYEE.JOB_ID
WHERE EMPLOYEE.SALARY BETWEEN 2000 AND 5000
GROUP BY EMPLOYEE_NAME;
-- Self-Join:
-- 59. Display the employee details with their manager names.
SELECT CONCAT(FIRST_NAME,' ',MIDDLE_NAME,' ',LAST_NAME) AS EMPLOYEE_NAME,MANAGER_ID FROM EMPLOYEE;

-- 60. Display the employee details who earn more than their manager’s salaries.
SELECT COUNT(*) AS COUNT,MANAGER_ID FROM EMPLOYEE GROUP BY MANAGER_ID;


-- 61. Show the no. of employees working under every manager.

-- Outer Join:
-- 61. Display employee details with all departments.
SELECT CONCAT(FIRST_NAME,' ',MIDDLE_NAME,' ',LAST_NAME) AS EMPLOYEE_NAME,SALARY,COMMISSION,EMPLOYEE.DEPARTMENT_ID FROM EMPLOYEE
LEFT OUTER JOIN DEPARTMENT
ON EMPLOYEE.DEPARTMENT_ID = DEPARTMENT.DEPARTMENT_ID;


-- 62. Display all employees in sales or operation departments.
SELECT CONCAT(FIRST_NAME,' ',MIDDLE_NAME,' ',LAST_NAME) AS 'EMPLOYEE NAME' , EMPLOYEE.DEPARTMENT_ID FROM EMPLOYEE
LEFT OUTER JOIN DEPARTMENT
ON EMPLOYEE.DEPARTMENT_ID = DEPARTMENT.DEPARTMENT_ID
WHERE DEPARTMENT.DEPARTMENT_ID IN (30,40);


-- Set Operators:
-- 63. List out the distinct jobs in Sales and Accounting Departments.
SELECT JOB.JOB_FUNCTION,DEPARTMENT.DEPARTMENT_ID FROM EMPLOYEE
JOIN DEPARTMENT
ON DEPARTMENT.DEPARTMENT_ID = EMPLOYEE.DEPARTMENT_ID
JOIN JOB
ON EMPLOYEE.JOB_ID = JOB.JOB_ID
WHERE DEPARTMENT.NAME IN ('SALES','ACCOUNTING')
GROUP BY JOB_FUNCTION;

-- 64. List out the ALL jobs in Sales and Accounting Departments.
SELECT JOB_FUNCTION FROM JOB WHERE JOB_ID IN (SELECT JOB_ID FROM EMPLOYEE WHERE DEPARTMENT_ID =(SELECT DEPARTMENT_ID FROM DEPARTMENT WHERE NAME='SALES')) 
UNION ALL
SELECT JOB_FUNCTION FROM JOB WHERE JOB_ID IN (SELECT JOB_ID FROM EMPLOYEE WHERE DEPARTMENT_ID =(SELECT DEPARTMENT_ID FROM DEPARTMENT WHERE NAME='ACCOUNTING'));

-- 65. List out the common jobs in Research and Accounting Departments in ascending order.
SELECT JOB_FUNCTION FROM JOB WHERE JOB_ID IN (SELECT JOB_ID FROM EMPLOYEE WHERE DEPARTMENT_ID =(SELECT DEPARTMENT_ID FROM DEPARTMENT WHERE NAME='RESEARCH')) 
UNION 
SELECT JOB_FUNCTION FROM JOB WHERE JOB_ID IN (SELECT JOB_ID FROM EMPLOYEE WHERE DEPARTMENT_ID =(SELECT DEPARTMENT_ID FROM DEPARTMENT WHERE NAME='ACCOUNTING')) 
ORDER BY JOB_FUNCTION;









